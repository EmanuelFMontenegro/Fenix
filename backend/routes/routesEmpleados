const express = require('express');
const router = express.Router();
const pool = require('../db');

// Middleware para el manejo de datos JSON en las solicitudes POST
router.use(express.json());

// Endpoint para crear un nuevo empleado (POST)
router.post('/crear_empleado', async (req, res) => {
  try {
    const { nombre, apellido, registro_rostro_id } = req.body; // Datos del empleado desde la detección facial

    if (!nombre || !apellido || !registro_rostro_id) {
      return res.status(400).json({ error: 'Faltan datos requeridos' });
    }

    const nuevoEmpleado = {
      usuario_id: 12, // Usar el usuario ID 12
      horario_laboral: '08:00-17:00',
      activo: 'A', // Activo (A) como valor predeterminado
      registro_rostro_id,
    };

    const connection = await db();

    // Insertar el nuevo empleado en la base de datos
    const [result] = await connection.execute(
      'INSERT INTO empleados (usuario_id, horario_laboral, activo, registro_rostro_id) VALUES (?, ?, ?, ?)',
      [nuevoEmpleado.usuario_id, nuevoEmpleado.horario_laboral, nuevoEmpleado.activo, nuevoEmpleado.registro_rostro_id]
    );

    if (result.affectedRows !== 1) {
      return res.status(500).json({ error: 'Error al crear el empleado' });
    }

    res.status(201).json({ message: 'Empleado creado con éxito', empleado: nuevoEmpleado });
  } catch (err) {
    console.error('Error al crear el empleado:', err);
    res.status(500).json({ error: 'Error interno del servidor' });
  }
});

// Otros endpoints para obtener, actualizar y eliminar empleados podrían agregarse de manera similar.

module.exports = router;